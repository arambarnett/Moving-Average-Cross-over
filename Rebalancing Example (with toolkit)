import time

BACKTEST = hasattr(info, "end");LIVE = not BACKTEST
THRESHOLD = 10 # Amount of leniency, to avoid trading on every tick (in USD)
PAIR = info.primary_pair
INTERVAL = 3600

def initialize():
    
    storage.algo_tick = -1


def instruments():  # called from tick()

    pair = info.primary_pair
    if pair == pairs.btc_usd:
        pair = 'btcusd'
    if pair == pairs.ltc_usd:
        pair = 'ltcusd'
    if pair == pairs.ltc_btc:
        pair = 'ltcbtc'
    if pair == pairs.btc_eur:
        pair = 'btceur'
    if pair == pairs.ltc_eur:
        pair = 'ltceur'
    if pair == pairs.btc_cny:
        pair = 'btccny'
    if pair == pairs.ltc_cny:
        pair = 'ltccny'
    storage.currency_code = ''.join(list((pair)[3:6]))
    storage.asset_code = ''.join(list((pair)[0:3]))
    storage.currency_CODE = (storage.currency_code).upper()
    storage.asset_CODE = (storage.asset_code).upper()
    return

def holdings():  # called from tick() AND market_ice()

    # Fetch portfolio balance and volume weighted price
    storage.currency = 0.001 + \
        float(portfolio[currencies[storage.currency_code]])
    storage.assets = 0.001 + float(portfolio[currencies[storage.asset_code]])
    price = storage.mean_price = float(data[PAIR].vwap(2))
    # Current Maximum assets and currency
    storage.potential_currency = storage.currency + \
        (storage.assets * storage.mean_price)
    storage.potential_assets = storage.assets + \
        (storage.currency / storage.mean_price)
    # Initial Maximum assets and currency
    if storage.algo_tick == 0:
        storage.start_currency = storage.potential_currency
        storage.start_assets = storage.potential_assets

    # Return On Investment and Percent Invested
    storage.percent_invested = 100 * storage.assets / storage.potential_assets
    storage.ROI_currency = (
        100 * storage.potential_currency / storage.start_currency) - 100
    storage.ROI_assets = (
        100 * storage.potential_assets / storage.start_assets) - 100

    # Boolean Wallet States
    storage.holding_assets = storage.holding_currency = False
    if storage.currency >= 0.02 * storage.mean_price:
        storage.holding_currency = True
    if storage.assets >= 0.01:
        storage.holding_assets = True

def anti_drift():
    
    instruments()
    holdings()
    
    currency = storage.currency
    assets = storage.assets
    
    price = float(data[PAIR].price)
    btc_value = assets * price
    diff = currency - btc_value
    
    if diff >= THRESHOLD:
        
        # We need to buy BTC
        amount = (diff / price) / 2
        buy(PAIR, amount)
        
    elif diff <= -THRESHOLD:
        
        # We need to sell BTC
        amount = (abs(diff) / price) / 2
        sell(PAIR, amount)
        
def tick(): 

    # Replace your tick() function with this:
    ########################################################################
    ########################################################################
    version = 'anti_drift() v4.034'
    ########################################################################
    now = time.time()
    recent = 180 # depth minutes for percent missing 1m ticks check
    if storage.algo_tick == -1: # tally of actual algorithm ticks
        log(version)
        log('Tick Interval in minutes Algorithm/Tradewave: %s / %s' % 
            ((INTERVAL/60),(info.interval/60)))
        storage.start_time = now # initialization time
        storage.tick_time = now - INTERVAL # time of last algo_tick
        storage.wave_tick = -1 # tally of actual live tradwave ticks
        storage.api_fail = False # load 1st email alert   
        storage.drift = [] # recent list of missing_ticks on each wave_tick
        for i in range(recent): # fill missing tick list with zeros
            storage.drift.append(0)
    if BACKTEST: #advance tick tally and call your original tick()
        storage.algo_tick += 1 
        anti_drift()
    if LIVE:
        storage.wave_tick += 1
        elapsed = now-storage.start_time
        tick_elapsed = now-storage.tick_time
        should_tick = int(math.floor((elapsed + 30)/ INTERVAL)) #30 seconds leeway
        unspent_ticks = should_tick-storage.algo_tick
        # calculate percent missing ticks in 'recent' minutes
        wave_drift = int((elapsed - storage.wave_tick*info.interval)/60)
        storage.drift.append(wave_drift)
        storage.drift = storage.drift[-recent:]
        missing_ticks = int(100*(storage.drift[-1] - 
            storage.drift[-recent])/recent) # percent 0 to 100   
        if missing_ticks <= 3: storage.api_fail = False  # reload email alert  
        # if I have too many unspent algo ticks, kill bot
        if unspent_ticks > 10:
            email('Exchange is Down', subject='Restart Your Bot')
            raise Stop()
        # if I have more than one unspent tick, tell me 
        if unspent_ticks > 1:
            log('WARNING correcting clock drift: %s unspent_ticks' % 
                unspent_ticks)
        # CLOCK WARNING - log and email
        message = ('%s ALERT! CLOCK DRIFT: %s percent missing 1m ticks in past %s minutes.'
            % (version, missing_ticks,recent))
        subject = ('WARNING! %s CLOCK FAILURE forward to sai@tradewave.net ASAP' 
            % info.primary_exchange)
        if missing_ticks >= 15: #15% missing ticks in past "recent" minutes
            log(message)
        if (missing_ticks >= 30) and (storage.api_fail == False):
            storage.api_fail = True
            log(subject)
            message += (' Something is wrong with your exchange API connection.' +
                ' Forward this message to sai@tradewave.net for support.')
            email(message, subject)      
        #if I have any unspent ticks and it has been at least half an interval
        if (unspent_ticks > 0) and (tick_elapsed >= (math.floor(INTERVAL/2))):
                storage.algo_tick += 1
                storage.tick_time = now
                algo_drift = int((elapsed - storage.algo_tick*INTERVAL)/60)
                log('Minutes of Clock Drift Algorithm/Tradewave:  %s / %s' % 
                    (algo_drift, wave_drift))
                anti_drift() # call your original tick() function
    ########################################################################                
    '''end anti_drift() tick proxy'''            
    ########################################################################
    ########################################################################        
        
def stop():
    
    log('ROI Currency: %.1f percent' % storage.ROI_currency)
    log('ROI Assets: %.1f percent' % storage.ROI_assets)
    
    
