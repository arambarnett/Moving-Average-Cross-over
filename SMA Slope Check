
# % Slope of Simple Moving Averges

#TIMEPERIODS = [10, 15, 20, 25, 30, 35, 40, 45]
#TIMEPERIODS = [20,21,22,23,24,25,26,27,28,29,30]4,6,8,10,12,14,16,18,
#TIMEPERIODS = [5,10,15,20,25,30,32,34,36,38,40,42,44,45,46,47,48,49,50,60,90]
#TIMEPERIODS = [30,60,90,120,150]

#TIMEPERIODS = [120,125,130,135, 140, 145, 150, 155, 160,165, 170]
#TIMEPERIODS = [31,32,33,34,35]

#TIMEPERIODS = [30,60,90,150]
TIMEPERIODS = [5,12,27,53,80,133]

SLOPE_OFFSET = -4
PRICE_OFFSET = 1.5
PAIR = info.primary_pair
INTERVAL = 43200 # 86400 = 1 day


def initialize():

    storage.z = storage.get('z', 0)


def ma1d(timeperiod):

    z = 1
    interval = INTERVAL
    if INTERVAL == 86400:
        interval = 43200
        z = 2
    sma = data(interval=interval)[PAIR].ma(timeperiod*z)
    return sma

    
def sma_slope(current, previous):
    
    slope_list = []
    z = 0
    while z < len(current):
        slope = 'slope'+str(z)  
        storage[slope] = (current[z] - previous[z])/current[z]
        slope_list.append(storage[slope])
        z+=1
    return slope_list

    
def moving_averages(period):
    
    ma_list = []
    for i in period:
        ma = 'ma'+str(i)
        storage[ma] = ma1d(i)
        ma_list.append(storage[ma])
    return ma_list    

    
def tick():
    
    z =    moving_averages(TIMEPERIODS)
    if info.tick == 0: 
        storage.z = z
    slope = sma_slope(z, storage.z)    
    if info.tick > 75:
        length = len(z)    
        while length > 0:
            plot('SMA'+str(TIMEPERIODS[length-1]), z[length-1])
            plot('slope'+str(TIMEPERIODS[length-1]), slope[length-1], 
              secondary=True)
            length-=1
    if info.tick == 75:
        slope_offset = max(abs(max(slope)), abs(min(slope)))
        price_offset = max(abs(max(z)), abs(min(z)))
        slope_offset = Decimal(SLOPE_OFFSET)*slope_offset
        price_offset = Decimal(PRICE_OFFSET)*price_offset
        plot('price_offset', .05)
        plot('slope_offset', -0.02, secondary=True)
    storage.z = z   
    
    #plot('high', data[PAIR].high)
    #plot('low', data[PAIR].low)
    plot('zero', 0, secondary=True)
    #plot('zero', 0.0000001, secondary = True)
    #plot('zero', -0.0000001, secondary = True)      
    
